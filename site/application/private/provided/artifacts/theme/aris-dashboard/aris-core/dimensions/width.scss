// we have a grid of 12 columns
// we have 3 breakpoints: phone, tablet, desktop
// desktop and above supports 12 columns
// [tablet, desktop[ supports 6 columns
// [phone, tablet[ supports 3 columns
// [.., phone[ supports 2 columns
// note that widescreens are popular, we automatically generate (if it does not exist) a widescreen size that is twice the desktop
// these widescreens have 24 columns
// each element can be assigned a number of columns it wants
// if you really want a 24 column entry (so that always takes up 100%), you shouldn't use columns at all but use a fit normal which will grow to the max size regardless

// an additional problem is the column gap which we don't have under control
// even we for instance want to have two columns, each at 50% in a row
// that's fine, until the row adds a column gap of even 1px
// this will cause the second 50% column to wrap to the next line (assuming wrap is on)
// without wrapping, there is less use from a responsive point of view

// even if we knew the column gap size, we wouldn't know how many cells are in a particular row
// one approach (used here) is instead of setting the "width" to 50%
// we set the min width to something sufficiently above the next level but below the max to accomodate for variable column gaps up to a certain size
// we then set flex-grow to 1 with no basis
// this means we can predictably state that it will fill the size we wanted

// I tested in firefox and chrome (@27-05-2022) and both gave the correct result EXCEPT in a particular case
// suppose we have two column-6 on a desktop (so we want 50% each)
// we want a column and row gap of 16pixels.
// we want to set wrapping on the row so it can cleanly resize for responsive
// as mentioned above, if we set hard 50%, it will overflow to the next
// if we set the below rules, we consistently had equal division of space EXCEPT when one of the cells had a _different_ horizontal padding from the other
// if both have the same horizontal padding (vertical doesn't matter) it works (whether that is no padding at all or a particular padding)
// once they have different padding, the column gap is deducted more from the side with the least padding
// no padding (or the same padding) resulted in both sides being exactly 902.5px
// once we bring a difference in padding, for example we set a padding-right of 1pixel on the left one, we get 903px width left and 902px right 
// if we set padding-left of 10pixels on the left one, it is 907.5px and the right one is 897.5px
// this means the following grid approach should be pixel perfect if we keep track of the padding on the columns themselves

// note that this is NOT pixel perfect across wrapped rows unless they are fully padded
// so if (through wrapping) you have 3 items (set at width 4) on one row and the last one on the next line
// this last one will be slightly wider because there is no column gap to compensate for
// the only way to ensure this doesn't happen is to make sure you always have "full" rows using empty content as needed
// in other words: the sum of all your configured columns _must_ be a multiple of 12

// width 12 is always 100%, regardless of screen size
@mixin column_width_column-12 {
	// always grow, otherwise our cell settings don't work
	flex-grow: 1;
	flex-basis: 0;
	min-width: 95%;
	max-width: 100%;
	// on widescreens, this takes up half
	@media only screen and (min-width: map-get($breakpoints, "wide")) {
		min-width: 47%;
		max-width: 50%;
	}
}
// any column between [6-11] is also 100% on anything smaller than a desktop
// note that the max-width is inclusive
@mixin column_width_column-11 {
	flex-grow: 1;
	flex-basis: 0;
	min-width: 87%;
	max-width: 91.66%;
	// on widescreens, 11/24
	@media only screen and (min-width: map-get($breakpoints, "wide")) {
		min-width: 43%;
		max-width: 45.8%;
	}
	@media only screen and (max-width: map-get($breakpoints, "below-desktop")) {
		min-width: 90%;
		max-width: 100%;
	}
}
@mixin column_width_column-10 {
	flex-grow: 1;
	flex-basis: 0;
	min-width: 79%;
	max-width: 83.33%;
	// on widescreens, 10/24
	@media only screen and (min-width: map-get($breakpoints, "wide")) {
		min-width: 39%;
		max-width: 41.6%;
	}
	@media only screen and (max-width: map-get($breakpoints, "below-desktop")) {
		min-width: 90%;
		max-width: 100%;
	}
}
@mixin column_width_column-9 {
	flex-grow: 1;
	flex-basis: 0;
	min-width: 69%;
	max-width: 75%;
	// on widescreens, 9/24
	@media only screen and (min-width: map-get($breakpoints, "wide")) {
		min-width: 35%;
		max-width: 37.5%;
	}
	@media only screen and (max-width: map-get($breakpoints, "below-desktop")) {
		min-width: 90%;
		max-width: 100%;
	}
}
// on a tablet, 8 columns is 100%
@mixin column_width_column-8 {
	flex-grow: 1;
	flex-basis: 0;
	min-width: 62%;
	max-width: 66.66%;
	// on widescreens, 8/24
	@media only screen and (min-width: map-get($breakpoints, "wide")) {
		min-width: 31%;
		max-width: 33.3%;
	}
	@media only screen and (max-width: map-get($breakpoints, "below-desktop")) {
		min-width: 90%;
		max-width: 100%;
	}
}
@mixin column_width_column-7 {
	flex-grow: 1;
	flex-basis: 0;
	min-width: 54%;
	max-width: 58.33%;
	// on widescreens, 7/24
	@media only screen and (min-width: map-get($breakpoints, "wide")) {
		min-width: 27%;
		max-width: 29.17%;
	}
	@media only screen and (max-width: map-get($breakpoints, "below-desktop")) {
		min-width: 90%;
		max-width: 100%;
	}
}
@mixin column_width_column-6 {
	flex-grow: 1;
	flex-basis: 0;
	min-width: 45%;
	max-width: 50%;
	// on widescreens, 6/24
	@media only screen and (min-width: map-get($breakpoints, "wide")) {
		min-width: 22%;
		max-width: 25%;
	}
	@media only screen and (max-width: map-get($breakpoints, "below-desktop")) {
		min-width: 90%;
		max-width: 100%;
	}
}
@mixin column_width_column-5 {
	flex-grow: 1;
	flex-basis: 0;
	min-width: 37%;
	max-width: 41.66%;
	// on widescreens, 5/24
	@media only screen and (min-width: map-get($breakpoints, "wide")) {
		min-width: 18%;
		max-width: 20.83%;
	}
	// between tablet and desktop, this takes up 5/6
	@media only screen and (max-width: map-get($breakpoints, "below-desktop")) and (min-width: map-get($breakpoints, "tablet")) {
		min-width: 67%;
		max-width: 83.3%;
	}
	// below tablet, it takes up 100%
	@media only screen and (max-width: map-get($breakpoints, "below-tablet")) {
		min-width: 90%;
		max-width: 100%;
	}
}
@mixin column_width_column-4 {
	flex-grow: 1;
	flex-basis: 0;
	min-width: 29%;
	max-width: 33.33%;
	// on widescreens, 4/24
	@media only screen and (min-width: map-get($breakpoints, "wide")) {
		min-width: 14%;
		max-width: 16.67%;
	}
	// between tablet and desktop, this takes up 4/6
	@media only screen and (max-width: map-get($breakpoints, "below-desktop")) and (min-width: map-get($breakpoints, "tablet")) {
		min-width: 56.6%;
		max-width: 66.6%;
	}
	// below tablet, it takes up 100%
	@media only screen and (max-width: map-get($breakpoints, "below-tablet")) {
		min-width: 90%;
		max-width: 100%;
	}
}
@mixin column_width_column-3 {
	flex-grow: 1;
	flex-basis: 0;
	min-width: 20%;
	max-width: 25%;
	// on widescreens, 3/24
	@media only screen and (min-width: map-get($breakpoints, "wide")) {
		min-width: 10%;
		max-width: 12.5%;
	}
	// between tablet and desktop, this takes up 3/6
	@media only screen and (max-width: map-get($breakpoints, "below-desktop")) and (min-width: map-get($breakpoints, "tablet")) {
		min-width: 40%;
		max-width: 50%;
	}
	// below tablet, it takes up 3/3
	@media only screen and (max-width: map-get($breakpoints, "below-tablet")) and (min-width: map-get($breakpoints, "phone")) {
		min-width: 90%;
		max-width: 100%;
	}
	// below phone, it takes up 100%
	@media only screen and (max-width: map-get($breakpoints, "below-phone")) {
		min-width: 90%;
		max-width: 100%;
	}
}
@mixin column_width_column-2 {
	flex-grow: 1;
	flex-basis: 0;
	min-width: 14%;
	max-width: 16.66%;
	// on widescreens, 2/24
	@media only screen and (min-width: map-get($breakpoints, "wide")) {
		min-width: 6%;
		max-width: 8.33%;
	}
	// between tablet and desktop, this takes up 2/6
	@media only screen and (max-width: map-get($breakpoints, "below-desktop")) and (min-width: map-get($breakpoints, "tablet")) {
		min-width: 23.3%;
		max-width: 33.3%;
	}
	// below tablet, it takes up 2/3
	@media only screen and (max-width: map-get($breakpoints, "below-tablet")) and (min-width: map-get($breakpoints, "phone")) {
		min-width: 56.6%;
		max-width: 66.6%;
	}
	// below phone, it takes up 100%
	@media only screen and (max-width: map-get($breakpoints, "below-phone")) {
		min-width: 90%;
		max-width: 100%;
	}
}
@mixin column_width_column-1 {
	flex-grow: 1;
	flex-basis: 0;
	max-width: 8.33%;
	// on widescreens, 1/24
	@media only screen and (min-width: map-get($breakpoints, "wide")) {
		max-width: 4.16%;
	}
	// between tablet and desktop, this takes up 1/6
	@media only screen and (max-width: map-get($breakpoints, "below-desktop")) and (min-width: map-get($breakpoints, "tablet")) {
		max-width: 16.6%;
		min-width: 10%;
	}
	// below tablet, it takes up 1/4
	@media only screen and (max-width: map-get($breakpoints, "below-tablet")) and (min-width: map-get($breakpoints, "phone")) {
		max-width: 33.3%;
		min-width: 25%;
	}
	// below phone, it takes up half
	@media only screen and (max-width: map-get($breakpoints, "below-phone")) {
		max-width: 50%;
		min-width: 40%;
	}
}

@mixin component_width_max-xlarge {
	max-width: 72rem;
}
@mixin component_width_max-large {
	max-width: 60rem;
}
@mixin component_width_max-medium {
	max-width: 48rem;
}
@mixin component_width_max-small {
	max-width: 36rem;
}
@mixin component_width_max-xsmall {
	max-width: 24rem;
}
@mixin component_width_min-xlarge {
	min-width: 72rem;
}
@mixin component_width_min-large {
	min-width: 60rem;
}
@mixin component_width_min-medium {
	min-width: 48rem;
}
@mixin component_width_min-small {
	min-width: 36rem;
}
@mixin component_width_min-xsmall {
	min-width: 24rem;
}

@mixin component_width_fixed-1 {
	width: 1rem;
}
@mixin component_width_fixed-2 {
	width: 2rem;
}
@mixin component_width_fixed-3 {
	width: 3rem;
}
@mixin component_width_fixed-4 {
	width: 4rem;
}
@mixin component_width_fixed-5 {
	width: 5rem;
}
@mixin component_width_fixed-6 {
	width: 6rem;
}
@mixin component_width_fixed-8 {
	width: 8rem;
}
@mixin component_width_fixed-12 {
	width: 12rem;
}
@mixin component_width_fixed-24 {
	width: 24rem;
}
@mixin component_width_fixed-48 {
	width: 48rem;
}
@mixin component_width_fixed-max {
	width: 100vw;
}
@mixin component_width_remainder-1 {
	width: calc(100% - 1rem);
}
@mixin component_width_remainder-2 {
	width: calc(100% - 2rem);
}
@mixin component_width_remainder-3 {
	width: calc(100% - 3rem);
}
@mixin component_width_remainder-4 {
	width: calc(100% - 4rem);
}
@mixin component_width_remainder-5 {
	width: calc(100% - 5rem);
}
@mixin component_width_remainder-6 {
	width: calc(100% - 6rem);
}
@mixin component_width_remainder-8 {
	width: calc(100% - 8rem);
}
@mixin component_width_remainder-12 {
	width: calc(100% - 12rem);
}
@mixin component_width_remainder-48 {
	width: calc(100% - 48rem);
}
@mixin component_width_max {
	width: 100%;
}

@mixin component_width_fit-content {
	width: fit-content;
}
